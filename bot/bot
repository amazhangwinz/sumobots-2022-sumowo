#define trigPin 3
#define echoPin 2
#define MAX_RANGE 400
#define MIN_RANGE 2
#define SPEED_SOUND 0.0344

#define WHITE 1
#define BLACK 0
#define CLOSE 1
#define FAR 0

#define LEFT_F 4    // Motor A (left) forward pin
#define LEFT_R 5    // Motor A (left) reverse pin
#define RIGHT_R 6   // Motor B (right) reverse pin
#define RIGHT_F 7   // Motor B (right) forward pin
#define IRSensor 11 // connect ir sensor to arduino pin 2
#define buttonPin 12
#define buzzer 8

#define TURN_ON 1
#define TURN_OFF 0

// variables will change:]
int lastState = LOW;
int currentState;

#define NOTE_B0  31
#define NOTE_C1  33
#define NOTE_CS1 35
#define NOTE_D1  37
#define NOTE_DS1 39
#define NOTE_E1  41
#define NOTE_F1  44
#define NOTE_FS1 46
#define NOTE_G1  49
#define NOTE_GS1 52
#define NOTE_A1  55
#define NOTE_AS1 58
#define NOTE_B1  62
#define NOTE_C2  65
#define NOTE_CS2 69
#define NOTE_D2  73
#define NOTE_DS2 78
#define NOTE_E2  82
#define NOTE_F2  87
#define NOTE_FS2 93
#define NOTE_G2  98
#define NOTE_GS2 104
#define NOTE_A2  110
#define NOTE_AS2 117
#define NOTE_B2  123
#define NOTE_C3  131
#define NOTE_CS3 139
#define NOTE_D3  147
#define NOTE_DS3 156
#define NOTE_E3  165
#define NOTE_F3  175
#define NOTE_FS3 185
#define NOTE_G3  196
#define NOTE_GS3 208
#define NOTE_A3  220
#define NOTE_AS3 233
#define NOTE_B3  247
#define NOTE_C4  262
#define NOTE_CS4 277
#define NOTE_D4  294
#define NOTE_DS4 311
#define NOTE_E4  330
#define NOTE_F4  349
#define NOTE_FS4 370
#define NOTE_G4  392
#define NOTE_GS4 415
#define NOTE_A4  440
#define NOTE_AS4 466
#define NOTE_B4  494
#define NOTE_C5  523
#define NOTE_CS5 554
#define NOTE_D5  587
#define NOTE_DS5 622
#define NOTE_E5  659
#define NOTE_F5  698
#define NOTE_FS5 740
#define NOTE_G5  784
#define NOTE_GS5 831
#define NOTE_A5  880
#define NOTE_AS5 932
#define NOTE_B5  988
#define NOTE_C6  1047
#define NOTE_CS6 1109
#define NOTE_D6  1175
#define NOTE_DS6 1245
#define NOTE_E6  1319
#define NOTE_F6  1397
#define NOTE_FS6 1480
#define NOTE_G6  1568
#define NOTE_GS6 1661
#define NOTE_A6  1760
#define NOTE_AS6 1865
#define NOTE_B6  1976
#define NOTE_C7  2093
#define NOTE_CS7 2217
#define NOTE_D7  2349
#define NOTE_DS7 2489
#define NOTE_E7  2637
#define NOTE_F7  2794
#define NOTE_FS7 2960
#define NOTE_G7  3136
#define NOTE_GS7 3322
#define NOTE_A7  3520
#define NOTE_AS7 3729
#define NOTE_B7  3951
#define NOTE_C8  4186
#define NOTE_CS8 4435
#define NOTE_D8  4699
#define NOTE_DS8 4978
#define REST      0


//
//// change this to make the song slower or faster
//int tempo = 190;
//
//int melody[] = {
//  
// 
//  NOTE_GS5,1, NOTE_G5,4, NOTE_G5,6, NOTE_A5,6, NOTE_G5,6, NOTE_E5,6, NOTE_C5,6, NOTE_E5,6, 
//  NOTE_G5,6, NOTE_A5,6,  NOTE_G5,6, NOTE_E5,2, NOTE_E5,2,  NOTE_E5,2,  NOTE_E5,2,  NOTE_E5,4, NOTE_E5,4,
//  NOTE_C6,6, NOTE_D6,6, NOTE_C6,6, NOTE_A5,6, NOTE_F5,6, NOTE_A5,6, NOTE_C6,6, NOTE_D6,6, NOTE_C6,6, NOTE_A5,2,
//  NOTE_E5,2,  NOTE_E5,2,  NOTE_E5,2,  NOTE_E5,4, NOTE_E5,4,
//  
//
//  
//};
//
//// sizeof gives the number of bytes, each int value is composed of two bytes (16 bits)
//// there are two values per note (pitch and duration), so for each note there are four bytes
//int notes = sizeof(melody) / sizeof(melody[0]) / 2;
//
//// this calculates the duration of a whole note in ms
//int wholenote = (60000 * 4) / tempo;
//
//int divider = 0, noteDuration = 0;

// IR code
int IRSensing() {
  int statusSensor = digitalRead(IRSensor);
  
  if (statusSensor == 1){
    moveBackward();
    delay(500);
    return WHITE;
  }
  
  else
  {
    return BLACK;

  }
}

// on off button code

// think about use buzzer

// Motor enables (to control power)
#define LEFT_SPEED 9  // left enable pin (ENA)
#define RIGHT_SPEED 10 // right enable pin (ENB)

#define MAX_SPEED 255
#define HALF_SPEED 128

void setup() {
  Serial.begin (9600);

  // Initialise Ultrasonic sensor
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);

    // Intiatlise motors
  Serial.println("Setting pins for motors");
  pinMode(LEFT_F, OUTPUT);
  pinMode(LEFT_R, OUTPUT);
  pinMode(RIGHT_F, OUTPUT);
  pinMode(RIGHT_R, OUTPUT);

  pinMode(LEFT_SPEED, OUTPUT);
  pinMode(RIGHT_SPEED, OUTPUT);

  // Initialise IR sensor
  pinMode (IRSensor, INPUT); // sensor pin INPUT

  // Initialise button
  pinMode(buttonPin, INPUT_PULLUP);

   pinMode(buzzer, OUTPUT); // Set buzzer - pin 9 as an output

}
//
//void music() {
//  for (int thisNote = 0; thisNote < notes * 2; thisNote = thisNote + 2) {
//
//    // calculates the duration of each note
//    divider = melody[thisNote + 1];
//    if (divider > 0) {
//      // regular note, just proceed
//      noteDuration = (wholenote) / divider;
//    } else if (divider < 0) {
//      // dotted notes are represented with negative durations!!
//      noteDuration = (wholenote) / abs(divider);
//      noteDuration *= 1.5; // increases the duration in half for dotted notes
//    }
//
//    // we only play the note for 90% of the duration, leaving 10% as a pause
//    tone(buzzer, melody[thisNote], noteDuration*0.9);
//
//    // Wait for the specief duration before playing the next note.
//    delay(noteDuration);
//    
//    // stop the waveform generation before the next note.
//    noTone(buzzer);
//  }
//}

int ultrasensor(int length) {
  float duration, distance;

  digitalWrite(trigPin, LOW); 

  // Pulses to obtain reading
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  // calculating distance from inputs
  duration = pulseIn(echoPin, HIGH);
  distance = (duration / 2) * SPEED_SOUND + 0.77;

  // printing distance into the serial monitor
  Serial.print("Distance = ");
  if (distance <= length) {
    return CLOSE;
  }
 
  delay(500);
}

void moveBackward() {
  // Move backwards at MAX_SPEED
  analogWrite(LEFT_SPEED, MAX_SPEED);
  analogWrite(RIGHT_SPEED, MAX_SPEED);
  digitalWrite(RIGHT_F, LOW);
  digitalWrite(RIGHT_R, HIGH);
  digitalWrite(LEFT_F, LOW);
  digitalWrite(LEFT_R, HIGH);
}
void moveForward() {
  // Move forward at MAX_SPEED
  analogWrite(LEFT_SPEED, MAX_SPEED);
  analogWrite(RIGHT_SPEED, MAX_SPEED);
  digitalWrite(RIGHT_F, HIGH);
  digitalWrite(RIGHT_R, LOW);
  digitalWrite(LEFT_F, HIGH);
  digitalWrite(LEFT_R, LOW);
}

void turnLeft() {
  // turnLeft at MAX_SPEED
  analogWrite(LEFT_SPEED, MAX_SPEED);
  analogWrite(RIGHT_SPEED, MAX_SPEED);
  digitalWrite(RIGHT_F, LOW);
  digitalWrite(RIGHT_R, HIGH);
  digitalWrite(LEFT_F, HIGH);
  digitalWrite(LEFT_R, LOW);
}

void turnRight() {
  // TURN Right at MAX_SPEED
  analogWrite(LEFT_SPEED, MAX_SPEED);
  analogWrite(RIGHT_SPEED, MAX_SPEED);
  digitalWrite(RIGHT_F, LOW);
  digitalWrite(RIGHT_R, HIGH);
  digitalWrite(LEFT_F, HIGH);
  digitalWrite(LEFT_R, LOW);
}

void ceaseMovement() {
  // stop moving
  analogWrite(LEFT_SPEED, MAX_SPEED);
  analogWrite(RIGHT_SPEED, MAX_SPEED);
  digitalWrite(RIGHT_F, LOW);
  digitalWrite(RIGHT_R, LOW);
  digitalWrite(LEFT_F, LOW);
  digitalWrite(LEFT_R, LOW);
}

// When not sense it
// ir inside here
void searchRightUntilSense() {
  while (true) {

    IRSensing();

 
    circleRight();
//        delay();
   Serial.println("heymotor");

    IRSensing();

           if (ultrasensor(100) == CLOSE) {
        
      // move forward until no longer see bot
    IRSensing();
      while (true) {
    IRSensing();
      

        moveForward();
//        delay(1000);
    IRSensing();
   
        if (ultrasensor(100) != CLOSE) {
    IRSensing();
     
          break;
        }
      }
    }
  }
}

void circleRight() {
    // TURN Right at MAX_SPEED
  analogWrite(LEFT_SPEED, MAX_SPEED);
  analogWrite(RIGHT_SPEED, HALF_SPEED);
  digitalWrite(RIGHT_F, LOW);
  digitalWrite(RIGHT_R, HIGH);
  digitalWrite(LEFT_F, HIGH);
  digitalWrite(LEFT_R, LOW);
}

// void PWMOutput() {
//   // Gives a PWM output to ENABLE_A corresponding to MAX_SPEED
//   analogWrite(RIGHT_SPEED, MAX_SPEED);
//   digitalWrite(RIGHT_F, HIGH);
//   digitalWrite(RIGHT_R, LOW);
//   digitalWrite(LEFT_F, HIGH);
//   digitalWrite(LEFT_R, LOW);
// }

int checkOnOff() {
  // read the state of the pushbutton value:
  currentState = digitalRead(buttonPin);

  // check if the pushbutton is pressed. If it is, the buttonState is HIGH:
  if (lastState == HIGH && currentState == LOW) {
    // turn LED on:
    Serial.println("on");
    return TURN_OFF;

  } else if (lastState == LOW && currentState == HIGH) {
    // turn LED off:
    Serial.println("released");
    delay(5000);
    return TURN_ON;
  } 
  lastState = currentState;
}


void loop() {
  // fix delay
  int status = checkOnOff();
  
    Serial.println("check");

  if (status == TURN_ON) {
            Serial.println("hey");

    searchRightUntilSense();
        Serial.println("hi");
    
  }

//  music();

  // 

}

// bump into white --> straight back for 0.5 sec


